var searchIndex = JSON.parse('{\
"adler":{"doc":"Adler-32 checksum implementation.","t":[3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Adler32","adler32_slice","borrow","borrow_mut","checksum","clone","default","finish","fmt","from","from_checksum","into","new","try_from","try_into","type_id","write","write_slice"],"q":["adler","","","","","","","","","","","","","","","","",""],"d":["Adler-32 checksum calculator.","Calculates the Adler-32 checksum of a byte slice.","","","Returns the calculated checksum at this point in time.","","","","","","Creates an <code>Adler32</code> instance from a precomputed Adler-32 …","","Creates a new Adler-32 instance with default state.","","","","","Adds <code>bytes</code> to the checksum calculation."],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[],["adler32",3]],[[]],[[],["u64",15]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"Adler32"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[6,4,8,6,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11],"n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":["byteorder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","","","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","","","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,3,1,2,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4]],["ordering",4]],[[["littleendian",4]],["ordering",4]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4]],["bool",15]],[[["littleendian",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigendian",4]],[["option",4,["ordering"]],["ordering",4]]],[[["littleendian",4]],[["option",4,["ordering"]],["ordering",4]]],[[],["f32",15]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[],["i128",15]],[[]],[[],["i16",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i64",15]],[[],["i64",15]],[[]],[[["usize",15]],["i64",15]],[[["usize",15]],["i128",15]],[[],["u128",15]],[[],["u128",15]],[[],["u128",15]],[[]],[[]],[[]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["usize",15]],["u128",15]],[[["usize",15]],["u128",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["f32",15]]],[[]],[[["f64",15]]],[[]],[[["i128",15]]],[[]],[[["i16",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i64",15]]],[[["i64",15]]],[[]],[[]],[[["usize",15],["i64",15]]],[[["usize",15],["i128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[]],[[]],[[]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[]],[[["u64",15],["usize",15]]],[[["u64",15],["usize",15]]],[[["u64",15],["usize",15]]],[[["usize",15],["u128",15]]],[[["usize",15],["u128",15]]],[[["usize",15],["u128",15]]]],"p":[[4,"BigEndian"],[4,"LittleEndian"],[8,"ByteOrder"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[null],"p":[]},\
"itoa":{"doc":"github crates-io docs-rs","t":[3,8,11,11,11,11,5,11,11,11,11,11,11,11],"n":["Buffer","Integer","borrow","borrow_mut","clone","default","fmt","format","from","into","new","try_from","try_into","type_id"],"q":["itoa","","","","","","","","","","","","",""],"d":["A safe API for formatting integers to text.","An integer that can be formatted by <code>itoa::write</code> and …","","","","","Write integer to an <code>fmt::Write</code>.","Print an integer into this buffer and return a reference …","","","This is a cheap operation; you don’t need to worry about …","","",""],"i":[0,0,1,1,1,1,0,1,1,1,1,1,1,1],"f":[null,null,[[]],[[]],[[]],[[],["buffer",3]],[[["write",8],["integer",8]],["result",6]],[[["integer",8]],["str",15]],[[]],[[]],[[],["buffer",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Buffer"]]},\
"opaque_debug":{"doc":"Macro for opaque <code>Debug</code> trait implementation.","t":[14],"n":["implement"],"q":["opaque_debug"],"d":["Macro for defining opaque <code>Debug</code> implementation."],"i":[0],"f":[null],"p":[]},\
"ppv_lite86":{"doc":"","t":[8,8,8,8,8,8,8,8,8,8,16,8,8,8,8,8,8,8,8,8,8,8,8,8,10,10,14,14,14,14,10,10,11,10,11,0,10,10,11,10,11,11,11,11,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,10,11,11,10,10,10,11,11,10,10,10,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,3,6,6,3,6,6,6,11,11,11,11,11,11,11,19,3,3,11,11,11,11],"n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Vec4Ext","Vector","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","dispatch_light512","extract","extract","extract","from_lanes","from_lanes","generic","insert","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle1230","shuffle2301","shuffle2301","shuffle3012","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_lanes","to_scalars","to_scalars","transpose4","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vzip","write_be","write_le","G0","G1","GenericMachine","add","add","add","add_assign","add_assign","add_assign","andnot","andnot","andnot","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bswap","bswap","bswap","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","eq","eq","eq","extract","extract","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_lanes","from_lanes","from_lanes","insert","insert","instance","into","into","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","new128","new128","not","not","not","rotate_each_word_right11","rotate_each_word_right11","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right12","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right16","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right20","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right24","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right25","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right7","rotate_each_word_right7","rotate_each_word_right8","rotate_each_word_right8","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","split128","split128","swap1","swap1","swap1","swap16","swap16","swap16","swap2","swap2","swap2","swap32","swap32","swap32","swap4","swap4","swap4","swap64","swap64","swap64","swap8","swap8","swap8","to_lanes","to_lanes","to_lanes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128x1_generic","u128x2_generic","u128x4_generic","u32x4_generic","u32x4x2_generic","u32x4x4_generic","u64x2_generic","u64x2x2_generic","u64x2x4_generic","u64x4_generic","unpack","unpack","unpack","unsafe_read_be","unsafe_read_be","unsafe_read_le","unsafe_read_le","vec128_storage","vec256_storage","vec512_storage","write_be","write_be","write_le","write_le"],"q":["ppv_lite86","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86::genericd":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","Vec4 functions which may not be implemented yet for all …","","A vector composed of four words; depending on their size, …","","","","","","","","","","Build a multi-lane vector from individual lanes.","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safetyi":[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,3,4,5,6,5,0,3,4,5,7,7,7,7,7,8,8,8,8,8,8,9,8,8,10,5,10,5,10,5,11,11,11,12,12,12,12,12,12,12,6,5,13,14,15,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,16,7,7,17,18,18,7,7,19,18,18,0,0,0,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,23,24,25,26,20,21,22,27,28,23,24,25,26,20,21,22,27,28,20,21,22,23,24,25,26,20,21,22,27,28,23,24,25,23,24,25,20,21,22,20,21,20,21,22,23,23,23,23,23,23,24,25,26,20,21,22,27,28,20,21,22,20,21,26,23,24,25,26,20,21,22,27,28,24,25,20,21,22,24,25,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,21,22,20,21,22,20,21,22,20,20,20,20,20,20,24,25,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,23,24,25,26,20,21,22,27,28,23,24,25,26,20,21,22,27,28,23,24,25,26,20,21,22,27,28,0,0,0,0,0,0,0,0,0,0,20,21,22,20,21,20,21,0,0,0,20,21,20,21],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,null,[[["u32",15]]],[[["u32",15]]],[[["u32",15]],["u64",15]],[[]],[[]],null,[[["u32",15]]],[[["u32",15]]],[[["u64",15],["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["store",8]],[[],["store",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec128_storage",19]],[[],["vec256_storage",3]],[[],["vec512_storage",3]],[[],["genericmachine",3]],[[],["u32x4_generic",3]],[[],["u64x2_generic",3]],[[],["u128x1_generic",3]],[[],["g0",3]],[[],["g1",3]],[[]],[[],["vec256_storage",3]],[[],["vec512_storage",3]],[[],["bool",15]],[[["vec256_storage",3]],["bool",15]],[[["vec512_storage",3]],["bool",15]],[[["u32x4_generic",3]],["bool",15]],[[["u64x2_generic",3]],["bool",15]],[[["u128x1_generic",3]],["bool",15]],[[["u32",15]],["u32",15]],[[["u32",15]],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u64x2_generic",3]]],[[]],[[["u32x4_generic",3]]],[[["u128x1_generic",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u64",15],["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec256_storage",3]],["bool",15]],[[["vec512_storage",3]],["bool",15]],[[["u32x4_generic",3]],["bool",15]],[[["u64x2_generic",3]],["bool",15]],[[["u128x1_generic",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["vec128_storage",19]]],[[["vec128_storage",19]]],[[["vec128_storage",19]]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]]],"p":[[8,"AndNot"],[8,"BSwap"],[8,"Vec2"],[8,"Vec4"],[6,"u64x4_generic"],[8,"MultiLane"],[8,"Machine"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"Vector"],[6,"u32x4x4_generic"],[8,"Vec4Ext"],[8,"Store"],[8,"UnsafeFrom"],[8,"StoreBytes"],[8,"VZip"],[3,"u32x4_generic"],[3,"u64x2_generic"],[3,"u128x1_generic"],[19,"vec128_storage"],[3,"vec256_storage"],[3,"vec512_storage"],[3,"GenericMachine"],[3,"G0"],[3,"G1"]]},\
"rustc_demangle":{"doc":"Demangle Rust compiler symbol names.","t":[3,3,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,11,11,11,11],"n":["Demangle","TryDemangleError","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","demangle","fmt","fmt","fmt","from","from","into","into","try_demangle","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rustc_demangle","","","","","","","","","","","","","","","","","","","","","",""],"d":["Representation of a demangled symbol name.","Error returned from the <code>try_demangle</code> function below when …","Returns the underlying string that’s being demangled.","","","","","","De-mangles a Rust symbol into a more readable version","","","","","","","","The same as <code>demangle</code>, except return an <code>Err</code> if the string …","","","","","",""],"i":[0,0,1,1,2,1,2,2,0,1,1,2,1,2,1,2,0,1,2,1,2,1,2],"f":[null,null,[[],["str",15]],[[]],[[]],[[]],[[]],[[],["trydemangleerror",3]],[[["str",15]],["demangle",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",15]],[["result",4,["demangle","trydemangleerror"]],["trydemangleerror",3],["demangle",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Demangle"],[3,"TryDemangleError"]]},\
"rustc_serialize":{"doc":"Support code for encoding and decoding types.","t":[8,8,8,8,8,8,16,16,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,4,3,8,4,13,13,13,7,4,7,13,8,7,13,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,4,13,13,8,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,12,12,13,6,13,13,13,3,3,13,13,13,3,6,13,6,3,4,13,13,13,13,13,6,3,4,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,4,4,13,13,13,13,13,13,13,13,6,13,13,13,13,3,4,3,3,4,13,13,13,8,13,13,13,13,13,13,13,11,11,11,11,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Decodable","Decoder","DecoderHelpers","Encodable","Encoder","EncoderHelpers","Error","Error","base64","decode","emit_bool","emit_char","emit_enum","emit_enum_struct_variant","emit_enum_struct_variant_field","emit_enum_variant","emit_enum_variant_arg","emit_f32","emit_f64","emit_from_vec","emit_i16","emit_i32","emit_i64","emit_i8","emit_isize","emit_map","emit_map_elt_key","emit_map_elt_val","emit_nil","emit_option","emit_option_none","emit_option_some","emit_seq","emit_seq_elt","emit_str","emit_struct","emit_struct_field","emit_tuple","emit_tuple_arg","emit_tuple_struct","emit_tuple_struct_arg","emit_u16","emit_u32","emit_u64","emit_u8","emit_usize","encode","error","hex","json","read_bool","read_char","read_enum","read_enum_struct_variant","read_enum_struct_variant_field","read_enum_variant","read_enum_variant_arg","read_f32","read_f64","read_i16","read_i32","read_i64","read_i8","read_isize","read_map","read_map_elt_key","read_map_elt_val","read_nil","read_option","read_seq","read_seq_elt","read_str","read_struct","read_struct_field","read_to_vec","read_tuple","read_tuple_arg","read_tuple_struct","read_tuple_struct_arg","read_u16","read_u32","read_u64","read_u8","read_usize","CRLF","CharacterSet","Config","FromBase64","FromBase64Error","InvalidBase64Byte","InvalidBase64Length","LF","MIME","Newline","STANDARD","Standard","ToBase64","URL_SAFE","UrlSafe","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char_set","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","description","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_base64","into","into","into","into","line_length","newline","pad","to_base64","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","1","FromHex","FromHexError","InvalidHexCharacter","InvalidHexLength","ToHex","borrow","borrow_mut","clone","clone_into","description","fmt","fmt","from","from_hex","into","to_hex","to_owned","to_string","try_from","try_into","type_id","0","1","ApplicationError","Array","Array","ArrayEnd","ArrayStart","AsJson","AsPrettyJson","BadHashmapKey","Boolean","BooleanValue","Builder","BuilderError","ControlCharacterInString","DecodeResult","Decoder","DecoderError","EOF","EOFWhileParsingArray","EOFWhileParsingObject","EOFWhileParsingString","EOFWhileParsingValue","EncodeResult","Encoder","EncoderError","Error","ErrorCode","ExpectedColon","ExpectedError","F64","F64Value","FmtError","I64","I64Value","Index","InvalidEscape","InvalidNumber","InvalidSyntax","InvalidUnicodeCodePoint","IoError","Json","JsonEvent","Key","KeyMustBeAString","LoneLeadingSurrogateInHexEscape","MissingFieldError","NotFourDigit","NotUtf8","Null","NullValue","Object","Object","ObjectEnd","ObjectStart","ParseError","Parser","ParserError","PrettyJson","Stack","StackElement","String","StringValue","SyntaxError","ToJson","TrailingCharacters","TrailingComma","U64","U64Value","UnexpectedEndOfHexEscape","UnknownVariantError","UnrecognizedHex","as_array","as_array_mut","as_boolean","as_f64","as_i64","as_json","as_null","as_object","as_object_mut","as_pretty_json","as_string","as_u64","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","decode","description","description","description","emit_bool","emit_char","emit_enum","emit_enum_struct_variant","emit_enum_struct_variant_field","emit_enum_variant","emit_enum_variant_arg","emit_f32","emit_f64","emit_i16","emit_i32","emit_i64","emit_i8","emit_isize","emit_map","emit_map_elt_key","emit_map_elt_val","emit_nil","emit_option","emit_option_none","emit_option_some","emit_seq","emit_seq_elt","emit_str","emit_struct","emit_struct_field","emit_tuple","emit_tuple_arg","emit_tuple_struct","emit_tuple_struct_arg","emit_u16","emit_u32","emit_u64","emit_u8","emit_usize","encode","encode","ends_with","eq","eq","eq","eq","eq","eq","eq","error","error_str","find","find_path","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_reader","from_str","from_str","get","indent","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_array","into_iter","into_object","is_array","is_boolean","is_empty","is_equal_to","is_f64","is_i64","is_null","is_number","is_object","is_string","is_u64","len","ne","ne","ne","ne","new","new","new","new","new","new_pretty","next","partial_cmp","pretty","read_bool","read_char","read_enum","read_enum_struct_variant","read_enum_struct_variant_field","read_enum_variant","read_enum_variant_arg","read_f32","read_f64","read_i16","read_i32","read_i64","read_i8","read_isize","read_map","read_map_elt_key","read_map_elt_val","read_nil","read_option","read_seq","read_seq_elt","read_str","read_struct","read_struct_field","read_tuple","read_tuple_arg","read_tuple_struct","read_tuple_struct_arg","read_u16","read_u32","read_u64","read_u8","read_usize","search","set_indent","stack","starts_with","to_json","to_json","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","top","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","2","0","0"],"q":["rustc_serialize","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustc_serialize::base64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustc_serialize::base64::FromBase64Error","","rustc_serialize::hex","","","","","","","","","","","","","","","","","","","","","rustc_serialize::hex::FromHexError","","rustc_serialize::jsonrustc_serialize::json::DecoderError","","","","","","rustc_serialize::json::EncoderError","rustc_serialize::json::Json","","","","","","","rustc_serialize::json::JsonEvent","","","","","","rustc_serialize::json::ParserError","","","","rustc_serialize::json::StackElement",""],"d":["Trait for deserializing a type.","Trait for reading in an encoding for deserialization.","Trait with helper functions for implementing <code>Decodable</code>.","Trait for serializing a type.","Trait for writing out an encoding when serializing.","Trait with helper functions for implementing <code>Encodable</code>.","The error type for method results.","The error type for method results.","Base64 binary-to-text encoding","Deserialize a value using a <code>Decoder</code>.","Emit a bool value.","Emit a char value.","Emit an enumeration value.","Emit a enumeration variant value with no or named data.","Emit a named data item for an enumeration variant.","Emit a enumeration variant value with no or unnamed data.","Emit an unnamed data item for an enumeration variant.","Emit a f32 value.","Emit a f64 value.","Emit a vector as a sequence.","Emit a i16 value.","Emit a i32 value.","Emit a i64 value.","Emit a i8 value.","Emit a isize value.","Emit an associative container (map).","Emit the key for an entry in a map.","Emit the value for an entry in a map.","Emit a nil value.","Emit an optional value.","Emit the <code>None</code> optional value.","Emit the <code>Some(x)</code> optional value.","Emit a sequence of values.","Emit an element in a sequence.","Emit a string value.","Emit a struct value.","Emit a field item for a struct.","Emit a tuple value.","Emit a data item for a tuple.","Emit a tuple struct value.","Emit a data item for a tuple struct.","Emit a u16 value.","Emit a u32 value.","Emit a u64 value.","Emit a u8 value.","Emit a usize value.","Serialize a value using an <code>Encoder</code>.","Record a decoding error.","Hex binary-to-text encoding","JSON parsing and serialization","Read a bool value.","Read a char value.","Read an enumeration value.","Read an enumeration value.","Read a named data item for an enumeration variant.","Read an enumeration value.","Read an unnamed data item for an enumeration variant.","Read a f32 value.","Read a f64 value.","Read a i16 value.","Read a i32 value.","Read a i64 value.","Read a i8 value.","Read a isize value.","Read an associative container (map).","Read the key for an entry in a map.","Read the value for an entry in a map.","Read a nil value.","Read an optional value.","Read a sequence of values.","Read an element in the sequence.","Read a string value.","Read an struct value.","Read a field for a struct value.","Read a sequence into a vector.","Read a tuple value.","Read a data item for a tuple.","Read a tuple struct value.","Read a data item for a tuple struct.","Read a u16 value.","Read a u32 value.","Read a u64 value.","Read a u8 value.","Read a usize value.","A carriage return and a linefeed (i.e. Windows-style …","Available encoding character sets","Contains configuration parameters for <code>to_base64</code>.","A trait for converting from base64 encoded values.","Errors that can occur when decoding a base64 encoded string","The input contained a character not part of the base64 …","The input had an invalid length","A linefeed (i.e. Unix-style newline)","Configuration for RFC 2045 MIME base64 encoding","Available newline types","Configuration for RFC 4648 standard base64 encoding","The standard character set (uses <code>+</code> and <code>/</code>)","A trait for converting a value to base64 encoding.","Configuration for RFC 4648 base64url encoding","The URL safe character set (uses <code>-</code> and <code>_</code>)","","","","","","","","","Character set to use","","","","","","","","","","","","","","","","","","","Converts the value of <code>self</code>, interpreted as base64 encoded …","","","","","<code>Some(len)</code> to wrap lines at <code>len</code>, <code>None</code> to disable line …","Newline to use","True to pad output with <code>=</code> characters","Converts the value of <code>self</code> to a base64 value following the …","","","","","","","","","","","","","","","","","","","","A trait for converting hexadecimal encoded values","Errors that can occur when decoding a hex encoded string","The input contained a character not part of the hex format","The input had an invalid length","A trait for converting a value to hexadecimal encoding","","","","","","","","","Converts the value of <code>self</code>, interpreted as hexadecimal …","","Converts the value of <code>self</code> to a hex value, returning the …","","","","","","","","","","","","","","","","","","A Builder consumes a json::Parser to create a generic Json …","","","","A structure to decode JSON to values in rust.","","","","","","","","A structure for implementing serialization to JSON.","","","The errors that can arise while parsing a JSON stream.","","","","","","","","","","","","","","Represents a json value","The output of the streaming parser.","","","","","","","","","","","","","","A streaming JSON parser implemented as an iterator of …","","","A Stack represents the current position of the parser in …","StackElements compose a Stack. For example, Key(“foo”…","","","msg, line, col","A trait for converting values to JSON","","","","","","","","If the Json value is an Array, returns a reference to the …","If the Json value is an Array, returns a mutable reference …","If the Json value is a Boolean, returns the associated …","If the Json value is a number, return or cast it to a f64. …","If the Json value is a number, return or cast it to a i64. …","Create an <code>AsJson</code> wrapper which can be used to print a …","If the Json value is a Null, returns (). Returns None …","If the Json value is an Object, returns a reference to the …","If the Json value is an Object, returns a mutable …","Create an <code>AsPrettyJson</code> wrapper which can be used to print …","If the Json value is a String, returns the associated str. …","If the Json value is a number, return or cast it to a u64. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shortcut function to decode a JSON <code>&amp;str</code> into an object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shortcut function to encode a <code>T</code> into a JSON <code>String</code>","","Returns true if the top-most elements of this stack are …","","","","","","","","","Returns a readable error string for a given error code.","If the Json value is an Object, returns the value …","Attempts to get a nested Json Object for each key in <code>keys</code>. …","Encodes a json value into a string","Encodes a json value into a string","Encodes a json value into a string","Encodes a json value into a string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decodes a json value from an <code>&amp;mut io::Read</code>","","Decodes a json value from a string","Provides access to the StackElement at a given index. …","Set the indentation level for the emitted JSON","","","","","","","","","","","","","","","","","","If the Json value is an Array, returns the associated …","","If the Json value is an Object, returns the associated …","Returns true if the Json value is an Array. Returns false …","Returns true if the Json value is a Boolean. Returns false …","Returns true if the stack is empty.","Compares this stack with an array of StackElements.","Returns true if the Json value is a f64. Returns false …","Returns true if the Json value is a i64. Returns false …","Returns true if the Json value is a Null. Returns false …","Returns true if the Json value is a Number. Returns false …","Returns true if the Json value is an Object. Returns false …","Returns true if the Json value is a String. Returns false …","Returns true if the Json value is a u64. Returns false …","Returns The number of elements in the Stack.","","","","","Creates a new encoder whose output will be written in …","","Creates the JSON parser.","Create a JSON Builder.","Creates a new decoder instance for decoding the specified …","Creates a new encoder whose output will be written in …","","","Borrow this json object as a pretty object to generate a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the Json value is an Object, performs a depth-first …","Set the number of spaces to indent for each level. This is …","Provides access to the current position in the logical …","Returns true if the bottom-most elements of this stack are …","Converts the value of <code>self</code> to an instance of JSON","","","","","","","","","","","","","Returns the top-most element (if any).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,2,0,3,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,2,7,0,0,0,0,8,8,7,0,0,0,9,0,0,9,9,7,10,8,9,7,10,8,10,9,7,10,8,9,7,10,8,8,9,7,10,8,8,9,7,10,8,11,9,7,10,8,10,10,10,12,9,7,10,8,8,9,7,10,8,9,7,10,8,9,7,10,8,13,13,0,0,14,14,0,14,14,14,14,14,14,14,14,15,14,16,14,14,14,14,14,17,17,18,0,19,20,20,0,0,21,19,20,0,0,22,0,0,0,18,22,22,22,22,0,0,0,20,0,22,18,19,20,21,19,20,23,22,22,22,22,24,0,0,23,22,22,18,22,22,19,20,0,19,20,20,18,0,0,0,0,0,19,20,24,0,22,22,19,20,22,18,22,19,19,19,19,19,0,19,19,19,0,19,19,25,26,27,28,29,30,31,32,19,22,24,18,21,20,23,25,26,27,28,29,30,31,32,19,22,24,18,21,20,23,31,18,19,22,21,23,19,22,21,23,0,24,18,21,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,19,29,19,22,24,18,21,20,23,32,0,19,19,25,26,27,19,19,22,24,24,18,18,21,21,20,23,25,26,27,28,29,30,31,32,19,22,24,24,18,18,21,21,20,23,19,19,19,29,27,19,19,25,26,27,28,29,30,31,32,19,22,24,18,21,20,23,19,30,19,19,19,29,29,19,19,19,19,19,19,19,29,19,18,20,23,28,29,30,31,32,28,30,19,19,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,19,28,30,29,33,19,19,22,21,23,25,26,27,19,24,18,21,29,25,26,27,28,29,30,31,32,19,22,24,18,21,20,23,25,26,27,28,29,30,31,32,19,22,24,18,21,20,23,25,26,27,28,29,30,31,32,19,22,24,18,21,20,23,34,35,36,37,38,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,53,53,55,56],"f":[null,null,null,null,null,null,null,null,null,[[],["result",4]],[[["bool",15]],["result",4]],[[["char",15]],["result",4]],[[["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[["isize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[["usize",15]],["result",4]],[[],["result",4]],[[["str",15]]],null,null,[[],[["bool",15],["result",4,["bool"]]]],[[],[["char",15],["result",4,["char"]]]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],[["f32",15],["result",4,["f32"]]]],[[],[["f64",15],["result",4,["f64"]]]],[[],[["result",4,["i16"]],["i16",15]]],[[],[["result",4,["i32"]],["i32",15]]],[[],[["result",4,["i64"]],["i64",15]]],[[],[["result",4,["i8"]],["i8",15]]],[[],[["isize",15],["result",4,["isize"]]]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],[["result",4,["string"]],["string",3]]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],[["result",4,["vec"]],["vec",3]]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15]],["result",4]],[[],[["u16",15],["result",4,["u16"]]]],[[],[["result",4,["u32"]],["u32",15]]],[[],[["result",4,["u64"]],["u64",15]]],[[],[["result",4,["u8"]],["u8",15]]],[[],[["usize",15],["result",4,["usize"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["characterset",4]],[[],["newline",4]],[[],["config",3]],[[],["frombase64error",4]],[[]],[[]],[[]],[[]],[[],["str",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["result",4,["vec","frombase64error"]],["frombase64error",4]]],[[]],[[]],[[]],[[]],null,null,null,[[["config",3]],["string",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[],["fromhexerror",4]],[[]],[[],["str",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],[["vec",3,["u8"]],["result",4,["vec","fromhexerror"]],["fromhexerror",4]]],[[]],[[],["string",3]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["array",6],["option",4,["array"]]]],[[],[["option",4,["array"]],["array",6]]],[[],[["option",4,["bool"]],["bool",15]]],[[],[["option",4,["f64"]],["f64",15]]],[[],[["i64",15],["option",4,["i64"]]]],[[],[["encodable",8],["asjson",3]]],[[],["option",4]],[[],[["option",4,["object"]],["object",6]]],[[],[["option",4,["object"]],["object",6]]],[[],[["asprettyjson",3],["encodable",8]]],[[],[["str",15],["option",4,["str"]]]],[[],[["u64",15],["option",4,["u64"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["json","buildererror"]],["json",4],["buildererror",6]]],[[],[["option",4,["stderror"]],["stderror",8]]],[[],["json",4]],[[],["errorcode",4]],[[]],[[],["stackelement",4]],[[]],[[]],[[]],[[]],[[["str",15]],[["decodable",8],["decoderesult",6]]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["bool",15]],["encoderesult",6]],[[["char",15]],["encoderesult",6]],[[["str",15]],["encoderesult",6]],[[["usize",15],["str",15]],["encoderesult",6]],[[["usize",15],["str",15]],["encoderesult",6]],[[["usize",15],["str",15]],["encoderesult",6]],[[["usize",15]],["encoderesult",6]],[[["f32",15]],["encoderesult",6]],[[["f64",15]],["encoderesult",6]],[[["i16",15]],["encoderesult",6]],[[["i32",15]],["encoderesult",6]],[[["i64",15]],["encoderesult",6]],[[["i8",15]],["encoderesult",6]],[[["isize",15]],["encoderesult",6]],[[["usize",15]],["encoderesult",6]],[[["usize",15]],["encoderesult",6]],[[["usize",15]],["encoderesult",6]],[[],["encoderesult",6]],[[],["encoderesult",6]],[[],["encoderesult",6]],[[],["encoderesult",6]],[[["usize",15]],["encoderesult",6]],[[["usize",15]],["encoderesult",6]],[[["str",15]],["encoderesult",6]],[[["usize",15],["str",15]],["encoderesult",6]],[[["usize",15],["str",15]],["encoderesult",6]],[[["usize",15]],["encoderesult",6]],[[["usize",15]],["encoderesult",6]],[[["usize",15],["str",15]],["encoderesult",6]],[[["usize",15]],["encoderesult",6]],[[["u16",15]],["encoderesult",6]],[[["u32",15]],["encoderesult",6]],[[["u64",15]],["encoderesult",6]],[[["u8",15]],["encoderesult",6]],[[["usize",15]],["encoderesult",6]],[[],[["string",3],["encoderesult",6,["string"]]]],[[],["result",4]],[[],["bool",15]],[[["json",4]],["bool",15]],[[["errorcode",4]],["bool",15]],[[["parsererror",4]],["bool",15]],[[["decodererror",4]],["bool",15]],[[["encodererror",4]],["bool",15]],[[["jsonevent",4]],["bool",15]],[[["stackelement",4]],["bool",15]],[[["str",15]],["decodererror",4]],[[["errorcode",4]],["str",15]],[[["str",15]],[["json",4],["option",4,["json"]]]],[[],[["json",4],["option",4,["json"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["parsererror",4]],[[]],[[["parsererror",4]],["decodererror",4]],[[]],[[]],[[["error",3]],["encodererror",4]],[[]],[[]],[[["read",8]],[["result",4,["buildererror"]],["buildererror",6]]],[[["str",15]],[["result",4,["json","parsererror"]],["json",4],["parsererror",4]]],[[["str",15]],[["result",4,["buildererror"]],["buildererror",6]]],[[["usize",15]],["stackelement",4]],[[["u32",15]],["asprettyjson",3]],[[["str",15]],["json",4]],[[["usize",15]],["json",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["array",6],["option",4,["array"]]]],[[]],[[],[["option",4,["object"]],["object",6]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[["json",4]],["bool",15]],[[["decodererror",4]],["bool",15]],[[["jsonevent",4]],["bool",15]],[[["stackelement",4]],["bool",15]],[[["write",8]],["encoder",3]],[[],["stack",3]],[[],["parser",3]],[[],["builder",3]],[[["json",4]],["decoder",3]],[[["write",8]],["encoder",3]],[[],[["jsonevent",4],["option",4,["jsonevent"]]]],[[["json",4]],[["option",4,["ordering"]],["ordering",4]]],[[],["prettyjson",3]],[[],[["bool",15],["decoderesult",6,["bool"]]]],[[],[["char",15],["decoderesult",6,["char"]]]],[[["str",15]],["decoderesult",6]],[[],["decoderesult",6]],[[["usize",15],["str",15]],["decoderesult",6]],[[],["decoderesult",6]],[[["usize",15]],["decoderesult",6]],[[],[["decoderesult",6,["f32"]],["f32",15]]],[[],[["decoderesult",6,["f64"]],["f64",15]]],[[],[["decoderesult",6,["i16"]],["i16",15]]],[[],[["i32",15],["decoderesult",6,["i32"]]]],[[],[["decoderesult",6,["i64"]],["i64",15]]],[[],[["i8",15],["decoderesult",6,["i8"]]]],[[],[["decoderesult",6,["isize"]],["isize",15]]],[[],["decoderesult",6]],[[["usize",15]],["decoderesult",6]],[[["usize",15]],["decoderesult",6]],[[],["decoderesult",6]],[[],["decoderesult",6]],[[],["decoderesult",6]],[[["usize",15]],["decoderesult",6]],[[],[["string",3],["decoderesult",6,["string"]]]],[[["usize",15],["str",15]],["decoderesult",6]],[[["usize",15],["str",15]],["decoderesult",6]],[[["usize",15]],["decoderesult",6]],[[["usize",15]],["decoderesult",6]],[[["usize",15],["str",15]],["decoderesult",6]],[[["usize",15]],["decoderesult",6]],[[],[["u16",15],["decoderesult",6,["u16"]]]],[[],[["decoderesult",6,["u32"]],["u32",15]]],[[],[["u64",15],["decoderesult",6,["u64"]]]],[[],[["decoderesult",6,["u8"]],["u8",15]]],[[],[["usize",15],["decoderesult",6,["usize"]]]],[[["str",15]],[["json",4],["option",4,["json"]]]],[[["u32",15]],["result",4]],[[],["stack",3]],[[],["bool",15]],[[],["json",4]],[[],["json",4]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["option",4,["stackelement"]],["stackelement",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[8,"Encoder"],[8,"Decoder"],[8,"Decodable"],[8,"EncoderHelpers"],[8,"Encodable"],[8,"DecoderHelpers"],[4,"Newline"],[4,"FromBase64Error"],[4,"CharacterSet"],[3,"Config"],[8,"FromBase64"],[8,"ToBase64"],[13,"InvalidBase64Byte"],[4,"FromHexError"],[8,"FromHex"],[8,"ToHex"],[13,"InvalidHexCharacter"],[4,"DecoderError"],[4,"Json"],[4,"JsonEvent"],[4,"EncoderError"],[4,"ErrorCode"],[4,"StackElement"],[4,"ParserError"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[8,"ToJson"],[13,"ParseError"],[13,"ExpectedError"],[13,"MissingFieldError"],[13,"UnknownVariantError"],[13,"ApplicationError"],[13,"FmtError"],[13,"I64"],[13,"U64"],[13,"F64"],[13,"String"],[13,"Boolean"],[13,"Array"],[13,"Object"],[13,"BooleanValue"],[13,"I64Value"],[13,"U64Value"],[13,"F64Value"],[13,"StringValue"],[13,"Error"],[13,"SyntaxError"],[13,"IoError"],[13,"Index"],[13,"Key"]]},\
"signature":{"doc":"RustCrypto: <code>signature</code> crate.","t":[3,6,8,8,8,8,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,10,11,10],"n":["Error","Result","Signature","Signer","SignerMut","Verifier","as_bytes","as_bytes","borrow","borrow_mut","default","fmt","fmt","from","from","from_bytes","from_source","into","new","sign","sign","sign","sign","source","to_string","try_from","try_into","try_sign","try_sign","type_id","verify"],"q":["signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Signature errors.","Result type.","Trait impl’d by concrete types that represent digital …","Sign the provided message bytestring using <code>Self</code> (e.g. a …","Sign the provided message bytestring using <code>&amp;mut Self</code> …","Verify the provided message bytestring using <code>Self</code> (e.g. a …","Borrow a byte slice representing the serialized form of …","Borrow a byte slice representing the serialized form of …","","","","","","","","Parse a signature from its byte representation","Create a new error with an associated source.","","Create a new error with no associated source","Sign the given message and return a digital signature","Sign the given message and return a digital signature","Sign the given message, update the state, and return a …","Sign the given message, update the state, and return a …","","","","","Attempt to sign the given message, returning a digital …","Attempt to sign the given message, updating the state, and …","","Use <code>Self</code> to verify that the provided signature for a given …"],"i":[0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,1,2,2,2,3,3,4,4,2,2,2,2,3,4,2,5],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["error",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["box",3,["error"]],["error",8]],["error",3]],[[],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["error"]],["error",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],["typeid",3]],[[],[["error",3],["result",4,["error"]]]]],"p":[[8,"Signature"],[3,"Error"],[8,"Signer"],[8,"SignerMut"],[8,"Verifier"]]},\
"subtle":{"doc":"subtle   ","t":[3,8,8,8,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Choice","ConditionallyNegatable","ConditionallySelectable","ConstantTimeEq","ConstantTimeGreater","ConstantTimeLess","CtOption","and_then","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","conditional_assign","conditional_negate","conditional_select","conditional_select","conditional_select","conditional_swap","ct_eq","ct_eq","ct_eq","ct_gt","ct_lt","fmt","fmt","from","from","from","into","into","is_none","is_some","map","new","not","or_else","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","unwrap_or","unwrap_or_else","unwrap_u8"],"q":["subtle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The <code>Choice</code> struct represents a choice for use in …","A type which can be conditionally negated in constant time.","A type which can be conditionally selected in constant …","An <code>Eq</code>-like trait that produces a <code>Choice</code> instead of a <code>bool</code>.","A type which can be compared in some manner and be …","A type which can be compared in some manner and be …","The <code>CtOption&lt;T&gt;</code> type represents an optional value similar …","Returns a <code>None</code> value if the option is <code>None</code>, otherwise …","","","","","","","","","","","","","","","Conditionally assign <code>other</code> to <code>self</code>, according to <code>choice</code>.","Negate <code>self</code> if <code>choice == Choice(1)</code>; otherwise, leave it …","Select <code>a</code> or <code>b</code> according to <code>choice</code>.","","","Conditionally swap <code>self</code> and <code>other</code> if <code>choice == 1</code>; …","Determine if two items are equal.","","Two <code>CtOption&lt;T&gt;</code>s are equal if they are both <code>Some</code> and their …","Determine whether <code>self &gt; other</code>.","Determine whether <code>self &lt; other</code>.","","","","","","","","Returns a true <code>Choice</code> if this value is <code>None</code>.","Returns a true <code>Choice</code> if this value is <code>Some</code>.","Returns a <code>None</code> value if the option is <code>None</code>, otherwise …","This method is used to construct a new <code>CtOption&lt;T&gt;</code> and …","","Returns <code>self</code> if it contains a value, and otherwise returns …","","","","","","","","","This returns the underlying value but panics if it is not …","This returns the underlying value if it is <code>Some</code> or the …","This returns the underlying value if it is <code>Some</code> or the …","Unwrap the <code>Choice</code> wrapper to reveal the underlying <code>u8</code>."],"i":[0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,2,1,2,1,2,1,3,4,3,2,1,3,5,2,1,6,7,2,1,2,2,1,2,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,1,1,1,2],"f":[null,null,null,null,null,null,null,[[],["ctoption",3]],[[["choice",3]],["choice",3]],[[["choice",3]]],[[["choice",3]],["choice",3]],[[["choice",3]]],[[["choice",3]],["choice",3]],[[["choice",3]]],[[]],[[]],[[]],[[]],[[],["choice",3]],[[],["ctoption",3]],[[]],[[]],[[["choice",3]]],[[["choice",3]]],[[["choice",3]]],[[["choice",3]]],[[["choice",3]]],[[["choice",3]]],[[],["choice",3]],[[["choice",3]],["choice",3]],[[["ctoption",3]],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u8",15]],["choice",3]],[[]],[[]],[[]],[[],["choice",3]],[[],["choice",3]],[[],["ctoption",3]],[[["choice",3]],["ctoption",3]],[[],["choice",3]],[[],["ctoption",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[],["u8",15]]],"p":[[3,"CtOption"],[3,"Choice"],[8,"ConditionallySelectable"],[8,"ConditionallyNegatable"],[8,"ConstantTimeEq"],[8,"ConstantTimeGreater"],[8,"ConstantTimeLess"]]},\
"tnb_rs":{"doc":"This crate is a SDk for thenewboston cryptocurrency …","t":[3,13,4,3,4,13,3,17,4,13,3,3,13,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["Account","BANK","BlockData","BlockMessage","ChainData","CoinTransfer","HDWallet","MAX_CHILD_INDEX","Node","PRIMARY_VALIDATOR","SignedMessage","Transaction","UpdateAccountTrust","account_number","account_number_hex","amount","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create_block_message","create_signature","create_signed_message","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","fee","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_mnemonic","from_seed","from_signing_key","get_account","get_account_0","get_first_account","into","into","into","into","into","into","into","into","is_valid_keypair","keypair_as_hex","memo","message","message","mnemonic","new","new","new_with_password","node_identifier","recipient","seed_hex","serialize","serialize","serialize","serialize","serialize","serialize","signature","signature","signing_key_hex","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify_signature","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","balance_key","txs","trust"],"q":["tnb_rs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tnb_rs::BlockData","","tnb_rs::ChainData"],"d":["An Account consists of an account_number and signing_key.","Bank Node","Contains the structure of supported block types","Block structure to make a block request on the network","Enum for Supported Node Requests","The Coin Transfer Block Type","A Hierarchical Deterministic Wallet that can create an …","The max number for the account_index and address_index","Enum that specifies a Node’s type","Primary Validator Node","Structure for making Node requests to the network","Transaction Data","Request structure for changing an account’s trust","sender’s account number","Returns the account number as a hex string","amount of coins to send","","","","","","","","","","","","","","","","","Creates a block message that can be broadcasted to make …","Signs the given message with the Account’s signing key","Creates a message that nodes can broadcast to make changes …","","","","","","","The fee paid to the node processing the transaction","","","","","","","","","","","","","","","","","Creates a HD Wallet from a specified mnemonic phrase.","Creates a HD Wallet from a seed in hex string format","Creates an Account from a signing key","Retrieves the account specified by the account_index and …","Retrieves an account specified by the address_index from …","Retrieves the first account from the hd wallet","","","","","","","","","Checks if a signing key and account number are keypairs","Returns a tuple of signing key and account number","optional message to add to the transaction","block message that contains the sender’s request","message that contains the node’s request","mnemonic phrase","Creates an random Account","Creates a new HD Wallet","Creates a new HD Wallet with an optional field for a …","The node’s identification number","The recipients account number","Returns the seed in hex format","","","","","","","thh signed message","thh signed message","Returns the signing key as a hex string","","","","","","","","","","","","","","","","","","","","","","","","","Static method that the verifies that a message was signed …","","","","","","","","","balance key of the sender’s account","An array of transactions to send to the network","account’s trust"],"i":[0,1,0,0,0,2,0,0,0,1,0,0,3,4,5,6,1,6,2,4,3,7,5,8,1,6,2,4,3,7,5,8,5,5,5,1,6,2,4,3,7,6,1,6,2,4,3,7,5,8,1,6,2,4,3,7,5,8,8,8,5,8,8,8,1,6,2,4,3,7,5,8,5,5,6,4,7,8,5,8,8,7,6,8,1,6,2,4,3,7,4,7,5,1,6,2,4,3,7,5,8,1,6,2,4,3,7,5,8,1,6,2,4,3,7,5,8,5,1,6,2,4,3,7,5,8,9,9,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["string",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["blockdata",4]],["blockmessage",3]],[[["str",15]],["string",3]],[[["chaindata",4]],["signedmessage",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["option",4,["str"]]]],[[["string",3]]],[[["str",15]]],[[["u32",15]],["account",3]],[[["u32",15]],["account",3]],[[],["account",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["bool",15]],[[]],null,null,null,null,[[]],[[]],[[["option",4,["str"]],["str",15]]],null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["str",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null],"p":[[4,"Node"],[4,"BlockData"],[4,"ChainData"],[3,"BlockMessage"],[3,"Account"],[3,"Transaction"],[3,"SignedMessage"],[3,"HDWallet"],[13,"CoinTransfer"],[13,"UpdateAccountTrust"]]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser …","t":[17,8,10,10],"n":["UNICODE_VERSION","UnicodeXID","is_xid_continue","is_xid_start"],"q":["unicode_xid","","",""],"d":["The version of Unicode that this version of unicode-xid is …","Methods for determining if a character is a valid …","Returns whether the specified <code>char</code> satisfies the ‘…","Returns whether the specified character satisfies the ‘…"],"i":[0,0,1,1],"f":[null,null,[[],["bool",15]],[[],["bool",15]]],"p":[[8,"UnicodeXID"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};