var searchIndex = JSON.parse('{\
"tnb_rs":{"doc":"This crate is a SDk for thenewboston cryptocurrency …","t":[3,13,4,3,4,13,3,17,4,13,3,3,13,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["Account","BANK","BlockData","BlockMessage","ChainData","CoinTransfer","HDWallet","MAX_CHILD_INDEX","NodeType","PRIMARY_VALIDATOR","SignedMessage","Transaction","UpdateAccountTrust","account_number","account_number_hex","amount","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create_block_message","create_signature","create_signed_message","deserialize","deserialize","deserialize","eq","fee","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_mnemonic","from_seed","from_signing_key","get_account","get_account_from_first_col","get_first_account","into","into","into","into","into","into","into","into","is_valid_keypair","keypair_as_hex","memo","message","message","mnemonic","ne","new","new","new_with_password","node_identifier","recipient","seed_hex","serialize","serialize","serialize","serialize","serialize","serialize","signature","signature","signing_key_hex","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify_signature","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","balance_key","txs","trust"],"q":["tnb_rs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tnb_rs::BlockData","","tnb_rs::ChainData"],"d":["An Account consists of an account number and a signing key.","Bank Node","Contains the structure of supported block types","Block structure to make a block request on the network","Enum for Supported Node Requests","The Coin Transfer Block Type","A Hierarchical Deterministic Wallet (HD Wallet) is a …","The max number for the account_index and address_index","Enum that specifies a Node’s type","Primary Validator Node","Structure for making Node requests to the network","Transaction Data","Request structure for changing an account’s trust","sender’s account number","Returns the account number as a hex string","amount of coins to send","","","","","","","","","","","","","","","","","Creates a block message that can be broadcasted to make …","Signs the given message with the Account’s signing key","Creates a message that nodes can broadcast to make changes …","","","","","The fee paid to the node processing the transaction","","","","","","","","","","","","","","","","","Creates a HD Wallet from a specified mnemonic phrase.","Creates a HD Wallet from a seed in hex string format","Creates an Account from a signing key","Retrieves the account specified by the account_index and …","Retrieves an account specified by the address_index from …","Retrieves the first account from the hd wallet","","","","","","","","","Checks if a signing key and account number are keypairs","Returns a tuple of the account number and signing key","optional message to add to the transaction","block message that contains the sender’s request","message that contains the node’s request","Returns a reference to the mnemonic phrase`","","Creates a new HD Wallet","Creates an random Account","Creates a new HD Wallet with an optional field for a …","The node’s identification number","The recipients account number","Returns the seed in hex format","","","","","","","thh signed message","thh signed message","Returns the signing key as a hex string","","","","","","","","","","","","","","","","","","","","","","","","","Static method that the verifies that a message was signed …","","","","","","","","","balance key of the sender’s account","An array of transactions to send to the network","account’s trust"],"i":[0,1,0,0,0,2,0,0,0,1,0,0,3,4,5,6,7,1,6,2,4,3,8,5,7,1,6,2,4,3,8,5,5,5,5,1,6,3,5,6,7,1,6,2,4,3,8,5,7,1,6,2,4,3,8,5,7,7,5,7,7,7,7,1,6,2,4,3,8,5,5,5,6,4,8,7,5,7,5,7,8,6,7,1,6,2,4,3,8,4,8,5,7,1,6,2,4,3,8,5,7,1,6,2,4,3,8,5,7,1,6,2,4,3,8,5,5,7,1,6,2,4,3,8,5,9,9,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["blockdata",4]],["blockmessage",3]],[[["str",15]],["string",3]],[[["chaindata",4]],["signedmessage",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["account",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["option",4,["str"]]],[["result",6,["hdwallet"]],["hdwallet",3]]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["u32",15]],["account",3]],[[["u32",15]],["account",3]],[[],["account",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["bool",15]],[[]],null,null,null,[[],["str",15]],[[["account",3]],["bool",15]],[[]],[[]],[[["option",4,["str"]],["str",15]]],null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["str",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["str",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null],"p":[[4,"NodeType"],[4,"BlockData"],[4,"ChainData"],[3,"BlockMessage"],[3,"Account"],[3,"Transaction"],[3,"HDWallet"],[3,"SignedMessage"],[13,"CoinTransfer"],[13,"UpdateAccountTrust"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};